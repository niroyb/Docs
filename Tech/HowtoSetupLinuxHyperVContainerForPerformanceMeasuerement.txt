Here are the instructions for the Linux Hyper-v container environment setup

1.Setup host
    Install Windows Server with build \\winbuilds\release\RS_ONECORE_CONTAINER_HYP\16172.1000.170406-1700\amd64fre or later
    Enable the hyper-v and container features
    Copy Linux kernel binaries to the host c:\Linux\Kernel
		C:\
		md c:\linux
		cd linux
		md kernel
		copy \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\bootx64.efi C:\Linux\kernel
		copy \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\initrd.img C:\Linux\kernel

               (Ps. I will provide linux kernel image in vhdx format after validating the latest drop from Intel)

    Register a GCS Service integration GUID for the hyper-v socket link between the host and the service VM by running the following register file
    \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\Linux\GuidsForGCSIntegrationServices.reg

2.Setup the Linux Service VM
	Copy the Linux service vm image from from \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\LinuxServiceVM\LinuxServiceVM.vhdx to a local drive on the host
	Create a Gen2 VM named with “LinuxServiceVM” from above image (it needs to has the exact name so that the know which VM to attach the VHDs to.)

3.Get the latest private DockerD bits 

              Copy dockerd.exe and docker.exe from \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\PrivateDockerBits to c:\windows\system32
	      
	In an elevated command box, run
	
           dockerd --register-service -g C:\ProgramData\dockerX
           net start docker
	   
        or (for debugging purpose) run
	    
	    run dockerd -D -g C:\ProgramData\dockerX
	    (-D, --debug Enable debug mode)
	
4. On the host machine, granting the VM group access to the directory containing the docker images and linux kernel bits.
               Copy \\apollon\public\Soccerl\HDVM\BootImages\ImageForIntegration\Linux\set_perms.ps1 c:\linux
	In a elevated Powershell command line, run:
	PS C:\Linux> ./set_perms.ps1 C:\ProgramData\dockerX
	PS C:\Linux> ./set_perms.ps1 C:\Linux


You are good to go!

-----------------------------------------------------------------------------
	Validate your setup by running the following sequence 
	
	PS C:\Linux> docker version
	Client:
	Version: 1.14.0-dev
	API version: 1.26
	Go version: go1.7.3
	Git commit: 31156ec53-unsupported
	Built: Thu Apr 6 13:57:28 2017
	OS/Arch: windows/amd64
	
	Server:
	Version: 1.14.0-dev
	API version: 1.26 (minimum version 1.24)
	Go version: go1.7.3
	Git commit: 31156ec53-unsupported
	Built: Thu Apr 6 13:57:28 2017
	OS/Arch: windows/amd64
	Experimental: false
	PS C:\Linux> docker images
	REPOSITORY TAG IMAGE ID CREATED SIZE
	PS C:\Linux> docker pull busybox
	Using default tag: latest
	latest: Pulling from library/busybox
	7520415ce762: Pull complete
	Digest: sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f
	Status: Downloaded newer image for busybox:latest
	PS C:\Linux> docker images
	REPOSITORY TAG IMAGE ID CREATED SIZE
	busybox latest 00f017a8c2a6 4 weeks ago 3.15 MB
	PS C:\Linux> docker run -i --isolation=hyperv busybox
	/ # ls
	ls
	bin dev etc home proc root sys tmp usr var
	/ #
	/ # uname -a
	uname -a
	Linux 6487de9654d9 4.10.0-rc4+ #1 SMP Thu Jan 19 18:58:56 PST 2017 x86_64 GNU/Linux
	/ #
	/ # exit
	exit
	PS C:\Linux>
	-----------------------------
