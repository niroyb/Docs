
w to create the initramfs image:

1. Make the neccessary folders:
        mkdir initrd
        mkdir initrd/{bin,dev,etc,lib,lib64,mnt,proc,root,sbin,sys}
    
2. Get busybox & install it to the initrd:
        wget https://busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-x86_64
        chmod +x busybox-x86_64
        mv busybox-x86_64 initrd/bin/
        cd initrd/bin
        ./busybox-x86_64 --install
    
3. Get runc & move it to the initrd folder with it's binaries:
        apt-get install runc
        cp <runc_path> initrd/sbin
        ldd `which runc` <- use this to check what libraries you need to copy to in initrd/lib and initrd/lib64. Should be libc, libpthread, libseccomp, libapparmor, and ld-linux-x86-64
       
4. Copy hv_sock kernel module over to the initrd:
        mkdir -p initrd/lib/modules/4.10.0-rc4+/kernel/net/hv_sock
        cp /lib/modules/4.10.0-rc4+/kernel/net/hv_sock/hv_sock.ko initrd/lib/modules/4.10.0-rc4+/kernel/net/hv_sock
        depmod --basedir initrd
        
5. Copy the gcs files over to initrd/root/integration:
        cp integration initrd/integration
        
6. Copy the dhcp script over to initrd/sbin/sample.script. This will let you use the dhcp client to get an IP address.
Here is the script. Remember to chmod +x it, so that it is executable.

#!/bin/sh
# udhcpc script edited by Tim Riker <Tim@Rikers.org>

RESOLV_CONF="/etc/resolv.conf"

[ -n "$1" ] || { echo "Error: should be called from udhcpc"; exit 1; }

NETMASK=""
[ -n "$subnet" ] && NETMASK="netmask $subnet"
BROADCAST="broadcast +"
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"

case "$1" in
        deconfig)
                echo "Setting IP address 0.0.0.0 on $interface"
                ifconfig $interface 0.0.0.0
                ;;

        renew|bound)
                echo "Setting IP address $ip on $interface"
                ifconfig $interface $ip $NETMASK $BROADCAST

                if [ -n "$router" ] ; then
                        echo "Deleting routers"
                        while route del default gw 0.0.0.0 dev $interface ; do
                                :
                        done

                        metric=0
                        for i in $router ; do
                                echo "Adding router $i"
                                route add default gw $i dev $interface metric $metric
                                : $(( metric += 1 ))
                        done
                fi

                echo "Recreating $RESOLV_CONF"
                # If the file is a symlink somewhere (like /etc/resolv.conf
                # pointing to /run/resolv.conf), make sure things work.
                realconf=$(readlink -f "$RESOLV_CONF" 2>/dev/null || echo "$RESOLV_CONF")
                tmpfile="$realconf-$$"
                > "$tmpfile"
                [ -n "$domain" ] && echo "search $domain" >> "$tmpfile"
                for i in $dns ; do
                        echo " Adding DNS server $i"
                        echo "nameserver $i" >> "$tmpfile"
                done
                mv "$tmpfile" "$realconf"
                ;;
esac

exit 0

7. Finally, copy the init script to initrd/init.
Here is the initr script (remember to chmod +x):

#!/bin/sh

# Configure everything before running GCS
# Set up mounts
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t devtmpfs udev /dev
mount -t tmpfs tmpfs /run
mount -t cgroup cgroup /sys/fs/cgroup

mkdir /dev/mqueue
mount -t mqueue mqueue /dev/mqueue
mkdir /dev/pts
mount -t devpts devpts /dev/pts
mkdir /dev/shm
mount -t tmpfs shm /dev/shm

# Set up internet
ifconfig eth0 up
udhcpc -q -s /sbin/simple.script

# Set up kernel modules
modprobe overlay
modprobe hv_sock

# Run shell
cd /root/integration
./gcs&
cd -
sh

